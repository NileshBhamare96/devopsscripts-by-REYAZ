üîπ How to use

1. Copy the script into a file, e.g., ===> vi setup-kops-argocd.sh

2. Make it executable: ====> chmod +x setup-kops-argocd.sh


3.  Run it ====> ./setup-kops-argocd.sh

‚úÖ This script does everything from Helm installation to ArgoCD deployment, including:

Installing Helm

Cleaning any leftover ArgoCD CRDs / namespace

Creating the argocd namespace

Installing ArgoCD via Helm

Exposing it via LoadBalancer

Waiting for pods to be ready

Printing external URL and admin credentials
==========================================================

#!/bin/bash

# ===============================
# 1Ô∏è‚É£ Install Helm
# ===============================
echo "Downloading and installing Helm..."
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh

echo "Helm version:"
helm version

# ===============================
# 2Ô∏è‚É£ Clean up old ArgoCD (if any)
# ===============================
echo "Cleaning up old ArgoCD resources..."
kubectl delete crd applications.argoproj.io appprojects.argoproj.io argocds.argoproj.io applicationsets.argoproj.io --ignore-not-found
kubectl delete ns argocd --force --grace-period=0 --ignore-not-found

# ===============================
# 3Ô∏è‚É£ Add Helm repo and update
# ===============================
echo "Adding ArgoCD Helm repo..."
helm repo add argo https://argoproj.github.io/argo-helm
helm repo update

# ===============================
# 4Ô∏è‚É£ Create ArgoCD namespace
# ===============================
echo "Creating namespace 'argocd'..."
kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

# ===============================
# 5Ô∏è‚É£ Install ArgoCD using Helm
# ===============================
echo "Installing ArgoCD Helm chart..."
helm install argocd argo/argo-cd -n argocd

# ===============================
# 6Ô∏è‚É£ Wait for ArgoCD pods to be ready
# ===============================
echo "Waiting for ArgoCD pods to be ready..."
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

# ===============================
# 7Ô∏è‚É£ Expose ArgoCD server externally
# ===============================
echo "Exposing ArgoCD server via LoadBalancer..."
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

# ===============================
# 8Ô∏è‚É£ Fetch external IP / DNS
# ===============================
ARGOCD_URL=""
while [ -z "$ARGOCD_URL" ]; do
  ARGOCD_URL=$(kubectl get svc argocd-server -n argocd -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
  [ -z "$ARGOCD_URL" ] && echo "Waiting for LoadBalancer..." && sleep 5
done
echo "ArgoCD URL: http://$ARGOCD_URL"

# ===============================
# 9Ô∏è‚É£ Get admin password
# ===============================
ARGOCD_PASS=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode)
echo "ArgoCD Username: admin"
echo "ArgoCD Password: $ARGOCD_PASS"

# ===============================
# 10Ô∏è‚É£ Done
# ===============================
echo "‚úÖ ArgoCD is ready. Access it at: http://$ARGOCD_URL"








